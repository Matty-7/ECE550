/**
 * READ THIS DESCRIPTION!
 *
 * The processor takes in several inputs from a skeleton file.
 *
 * Inputs
 * clock: this is the clock for your processor at 50 MHz
 * reset: we should be able to assert a reset to start your pc from 0 (sync or
 * async is fine)
 *
 * Imem: input data from imem
 * Dmem: input data from dmem
 * Regfile: input data from regfile
 *
 * Outputs
 * Imem: output control signals to interface with imem
 * Dmem: output control signals and data to interface with dmem
 * Regfile: output control signals and data to interface with regfile
 *
 * Notes
 *
 * Ultimately, your processor will be tested by substituting a master skeleton, imem, dmem, so the
 * testbench can see which controls signal you activate when. Therefore, there needs to be a way to
 * "inject" imem, dmem, and regfile interfaces from some external controller module. The skeleton
 * file acts as a small wrapper around your processor for this purpose.
 *
 * You will need to figure out how to instantiate two memory elements, called
 * "syncram," in Quartus: one for imem and one for dmem. Each should take in a
 * 12-bit address and allow for storing a 32-bit value at each address. Each
 * should have a single clock.
 *
 * Each memory element should have a corresponding .mif file that initializes
 * the memory element to certain value on start up. These should be named
 * imem.mif and dmem.mif respectively.
 *
 * Importantly, these .mif files should be placed at the top level, i.e. there
 * should be an imem.mif and a dmem.mif at the same level as process.v. You
 * should figure out how to point your generated imem.v and dmem.v files at
 * these MIF files.
 *
 * imem
 * Inputs:  12-bit address, 1-bit clock enable, and a clock
 * Outputs: 32-bit instruction
 *
 * dmem
 * Inputs:  12-bit address, 1-bit clock, 32-bit data, 1-bit write enable
 * Outputs: 32-bit data at the given address
 *
 */
module processor(
  // Control signals
  clock,                          // I: The master clock
  reset,                          // I: A reset signal

  // Imem
  address_imem,                   // O: The address of the data to get from imem
  q_imem,                         // I: The data from imem

  // Dmem
  address_dmem,                   // O: The address of the data to get or put from/to dmem
  data,                           // O: The data to write to dmem
  wren,                           // O: Write enable for dmem
  q_dmem,                         // I: The data from dmem

  // Regfile
  ctrl_writeEnable,               // O: Write enable for regfile
  ctrl_writeReg,                  // O: Register to write to in regfile
  ctrl_readRegA,                  // O: Register to read from port A of regfile
  ctrl_readRegB,                  // O: Register to read from port B of regfile
  data_writeReg,                  // O: Data to write to for regfile
  data_readRegA,                  // I: Data from port A of regfile
  data_readRegB                   // I: Data from port B of regfile
);
  // Control signals
  input clock, reset;

  // Imem
  output [11:0] address_imem;
  input [31:0] q_imem;

  // Dmem
  output [11:0] address_dmem;
  output [31:0] data;
  output wren;
  input [31:0] q_dmem;

  // Regfile
  output ctrl_writeEnable;
  output [4:0] ctrl_writeReg, ctrl_readRegA, ctrl_readRegB;
  output [31:0] data_writeReg;
  input [31:0] data_readRegA, data_readRegB;

  /* YOUR CODE STARTS HERE */

  wire [31:0] pc;
  wire [31:0] pc_next;

  wire [31:0] pc_increment;
  assign pc_increment = 32'b1;

  wire [31:0] pc_plus_one;

  alu pc_alu (
    .data_operandA(pc),
    .data_operandB(pc_increment),
    .ctrl_ALUopcode(5'b00000),
    .ctrl_shiftamt(5'b0),
    .data_result(pc_plus_one),
    .isNotEqual(),
    .isLessThan(),
    .overflow()
  );

  wire reset_not;
  assign reset_not = ~reset;

  genvar i;
  generate
    for (i = 0; i < 32; i = i + 1) begin: pc_next_logic
      assign pc_next[i] = pc_plus_one[i] & reset_not;
    end
  endgenerate

  genvar j;
  generate
    for (j = 0; j < 32; j = j + 1) begin: pc_register
      dffe_ref pc_dffe (
        .q(pc[j]),
        .d(pc_next[j]),
        .clk(clock),
        .en(1'b1),
        .clr(1'b0)
      );
    end
  endgenerate

  assign address_imem = pc[11:0];

  wire [31:0] instruction;
  assign instruction = q_imem;

  wire [4:0] opcode;
  wire [4:0] rd, rs, rt;
  wire [4:0] shamt, alu_op;
  wire [16:0] immediate;

  assign opcode = instruction[31:27];
  assign rd = instruction[26:22];
  assign rs = instruction[21:17];
  assign rt = instruction[16:12];
  assign shamt = instruction[11:7];
  assign alu_op = instruction[6:2];
  assign immediate = instruction[16:0];

  // For I-type instructions
  wire [31:0] imm_ext;
  assign imm_ext[16:0] = immediate;
  assign imm_ext[31:17] = {15{immediate[16]}};

  wire Rwe, Rdst, ALUinB, ALUop_ctl, DMWe, Rwd, JP, BR;
  wire is_R, is_addi, is_sw, is_lw;

  // Control
  control control_unit (
    .opcode(opcode),
    .Rwe(Rwe),
    .Rdst(Rdst),
    .ALUinB(ALUinB),
    .ALUop_ctl(ALUop_ctl),
    .DMWe(DMWe),
    .Rwd(Rwd),
    .JP(JP),
    .BR(BR),
    .is_R(is_R),
    .is_addi(is_addi),
    .is_sw(is_sw),
    .is_lw(is_lw)
  );

  // Regfile
  assign ctrl_readRegA = rs;
  assign ctrl_readRegB = rt;
  assign ctrl_writeReg = rd;
  assign ctrl_writeEnable = Rwe;

  // ALU
  wire alu_data_operandA, alu_data_operandB, is_overflow, is_not_equal, is_less_than;
  wire [31:0] alu_output;
  assign alu_data_operandA = data_readRegA;
  assign alu_data_operandB = ALUinB ? imm_ext : data_readRegB;
  alu alu_unit (
    .data_operandA(alu_data_operandA),
    .data_operandB(alu_data_operandB),
    .ctrl_ALUopcode(alu_op),
    .ctrl_shiftamt(shamt),
    .data_result(alu_output),
    .isNotEqual(is_not_equal),
    .isLessThan(is_less_than),
    .overflow(is_overflow)
  );
  // DMEM
  assign address_dmem = alu_output[11:0];
  assign data = data_readRegB;
  assign wren = DMWe;


endmodule
